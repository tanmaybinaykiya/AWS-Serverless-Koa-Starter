#!/usr/bin/env node
"use strict";

process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";


process.env.SMG_LOCAL = true;
process.env.AWS_PROFILE = "aws-profile-name";
process.env.NODE_DEBUG = "request";
process.env.SERVERLESS_REGION = "us-west-2";
process.env.SERVERLESS_STAGE = "dev";
process.env.SERVERLESS_SERVICE_NAME = "localRun";
process.env.LOCAL_DYNAMO = "http://127.0.0.1:8000"

//module dependencies.
var apps = [];
apps.push(require("../functions/dummy-service/routes/dummy-service/app").app);

var http = require("http");

//get port from environment and store in Express.
var port = normalizePort(process.env.PORT || 9876);
apps.forEach((app, index) => {
    // app.set("port", port + index);
    console.log(app);
    var server = http.createServer(app.callback());
    server.listen(port + index);
    server.on("error", onError);
    server.on("listening", onListening(server));
})

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCESS":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(server) {
    return function() {
        var addr = server.address();
        var bind = typeof addr === "string"
            ? "pipe " + addr
            : "port " + addr.port;
        console.log("Listening on " + bind);
    };
}
